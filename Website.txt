Beer-Beer Similarity
We used methods similar to those used in Homework 4 to create a database of "Item-Item" similarities using Pearson's r correlation coefficient as the similarity measure. However, because of the large scale of the data (1,829,749 reviews, 1.63GB) we were analyzing, it was infeasible to process the similarities on a single machine. We parallelized the similarity calculation into MapReduce which we computed on Amazon EC2 Hadoop clusters. We also used collaborative filtering (CF) to be able to suggest similar "neighbors" of a beer the user has rated by aspect and predicted what the user would rate them according to each aspect. 

User-User Similarity
It makes sense that if a user shares your tastes, a beer he likes is probably one you will also enjoy. You will have high similarity to another user if you both rated the similar beers in the similar ways. We constructed a "User-User" similarity Database using MapReduce on Amazon EC2 and use collaborative filtering to suggest beers that similar users liked and predict how the user would rate them on each aspect.

Textual Sentiment Analysis
We predict what a user would rate a particular beer by analyzing the text of the reviews the user has posted as well as the textual reviews posted by other users of the beer. We predict this by looking at the words other users reviewed the beer with and consider how the user has associated those words in their own reviews. In more detail, from the aspect parameter vectors we modelled we can get the probabilities that the particular user associates a word to a particular aspect and rating. For every aspect, we look at every review of the particular beer and get the sentence that is most likely to be about that aspect. We then store, for the particular user, the most likely rating the word implies for the aspect and the probability that the user associates the word with the aspect. We then take a weighted average of all the contextual words in the existing reviews weighted with how the user associates the word with particular ratings to predict what the user would rate that aspect of the beer.

Textual Aspect Analysis
[Tagline]
We analyzed each sentence in a textual review in order to identify which aspect the sentence talks about. This allows us to measure the sentiment in specific words in relation to an aspect rating. We could also use this to correlate and analyze sentences with more advanced aspects that aren't summed up in the Look, Taste, Feel, Smell categories.
We achieved this by modelling two parameter vectors that respectively encode words that discuss an aspect and words that discuss the associated sentiment. We can use these parameter vectors to calculate an indivdual probability of that a sentence discusses a particular aspect given the ratings as well as the probability for an entire review and the entire corpus. We model the two parameter vectors and latent aspect assignments by maximizing the log-likelihood probability of the corpus. We optimize this by coordinate ascent on the parameter vectors and alternately optimize the most likely latent aspect by calculating probabilities and the most likely parameter vectors through gradient ascent.